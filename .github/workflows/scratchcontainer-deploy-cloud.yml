name: Build tiny container and deploy into Cloud
on:
  workflow_dispatch:

env:
  JDK_VERSION: '17'
  GRAALVM_DISTRIBUTION: 'graalvm'
  AWS_REGION: 'us-east-2'
  AZURE_REGION: 'east us'
  CONTAINER_REPOSITORY: spring-aot-app
  IMAGE_TAG: 'alpine'

permissions:
  id-token: write   # This is required for requesting the JWT
  contents: read    # This is required for actions/checkout

jobs:
  build:
    name: Build fully static native image executable
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: GraalVM Setup
        uses: graalvm/setup-graalvm@v1
        with:
          distribution: ${{env.GRAALVM_DISTRIBUTION}}
          java-version: ${{env.JDK_VERSION}}
          native-image-musl: 'true'
          components: 'native-image'
          native-image-job-reports: 'true'

      - name: Validate GraalVM version and pre-requisites installation
        run: |
          echo "GRAALVM_HOME: $GRAALVM_HOME"
          echo "JAVA_HOME: $JAVA_HOME"
          java --version
          native-image --version
          echo "gcc version:"; gcc --version

      - name: Generate native image executable Linux
        run: |
          cd ./Serie2-DevelopingCloudJavaApp/spring-aot
          chmod +x mvnw mvnw.cmd
          ./mvnw clean -Pnative native:compile

      - name: Upload binary
        uses: actions/upload-artifact@v2
        with:
          name: spring-aot-ni
          path: ./Serie2-DevelopingCloudJavaApp/spring-aot/target/spring-aot-ni*

  delivery-aws:
    name: AWS - Pushing into ECR
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download binary
        id: download
        uses: actions/download-artifact@v3
        with:
          name: spring-aot-ni
          path: ./Serie2-DevelopingCloudJavaApp/spring-aot

      - name: Checking binary executable
        run: |
          chmod a+x ${{steps.download.outputs.download-path}}/spring-aot-ni
          ls -lh ${{steps.download.outputs.download-path}}

      - name: Configure aws credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: 'true'

      - name: Build, tag, and push docker image to Amazon ECR
        uses: docker/build-push-action@v4
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        with:
          context: .
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.CONTAINER_REPOSITORY }}:${{ env.IMAGE_TAG }}
          file: Serie2-DevelopingCloudJavaApp/spring-aot/Dockerfile.aws
          build-args: APP_FILE=Serie2-DevelopingCloudJavaApp/spring-aot/spring-aot-ni

  delivery-azure:
    name: Azure - Pushing into ACR
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download binary
        id: download
        uses: actions/download-artifact@v3
        with:
          name: spring-aot-ni
          path: ./Serie2-DevelopingCloudJavaApp/spring-aot

      - name: Checking binary executable
        run: |
          chmod a+x ${{steps.download.outputs.download-path}}/spring-aot-ni
          ls -lh ${{steps.download.outputs.download-path}}

      # Configuring Buildx to build multi-architecture images (arm64,amd64,x86-64,etc)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Azure container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ vars.ACR_NAME }}.azurecr.io
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Build, tag, and push docker image to Azure Container Registry
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ vars.ACR_NAME }}.azurecr.io/${{ env.CONTAINER_REPOSITORY }}:${{ env.IMAGE_TAG }}
          file: Serie2-DevelopingCloudJavaApp/spring-aot/Dockerfile.alpine
          build-args: APP_FILE=Serie2-DevelopingCloudJavaApp/spring-aot/spring-aot-ni

  deploy-aws:
    name: AWS - Deploy ECS
    runs-on: ubuntu-latest
    needs: delivery-aws
    environment:
      name: 'Development'
      url: http://${{ steps.ecs-task-public.outputs.public_dns }}:8080/community
    steps:
      - name: Login AWS via OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition task-container-graalvm --query taskDefinition > task-definition.json      

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: task-definition.json
          service: graalvm-svc-demo
          cluster: graalvm-ecs-demo
          wait-for-service-stability: true

      - name: Get Amazon ECS Fargate Task Public DNS
        id: ecs-task-public
        run: |
          task_ip=$(aws ecs describe-tasks --cluster graalvm-ecs-demo --tasks $(aws ecs list-tasks --cluster graalvm-ecs-demo --service-name graalvm-svc-demo --query "taskArns[0]" --output text) --query "tasks[0].attachments[0].details[?name=='privateIPv4Address'].value" --output text)
          echo "Task Private IP: $task_ip"

          public_dns=$(aws ec2 describe-network-interfaces --filters "Name=private-ip-address,Values=$task_ip" --query "NetworkInterfaces[0].Association.PublicDnsName" --output text)
          echo "public_dns=${public_dns}" >> $GITHUB_OUTPUT

  deploy-azure:
    name: Azure - Deploy Containerapp
    runs-on: ubuntu-latest
    needs: delivery-azure
    environment:
      name: 'Development'
      url: ${{ steps.spring-aot-containerapp.outputs.appUrl }}/community
    steps:
      - name: Login via Azure CLI
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to Azure Container App
        id: spring-aot-containerapp
        uses: czelabueno/container-apps-deploy-action@v0.9
        with:
          containerAppName: spring-aot-containerapp
          resourceGroup: rg-demo-czela
          imageToDeploy: ${{ vars.ACR_NAME }}.azurecr.io/${{ env.CONTAINER_REPOSITORY }}:${{ env.IMAGE_TAG }}
          acrName: ${{ vars.ACR_NAME }}
          acrUsername: ${{ secrets.ACR_USERNAME }}
          acrPassword: ${{ secrets.ACR_PASSWORD }}
          targetPort: 8080
          location: ${{ env.AZURE_REGION}}
          containerAppEnvironment: managedEnvironment-czela


